<?php

/**
 * @file
 * Hooks and core integration for the File Link Usage module.
 */

use Drupal\node\NodeInterface;
use Drupal\file\FileInterface;

/**
 * Responds to entity insert events.
 */
function filelink_usage_entity_insert(\Drupal\Core\Entity\EntityInterface $entity) {
  // If content entity of type node, block, taxonomy or comment, scan for file links.
  $entity_type = $entity->getEntityType()->id();
  if (in_array($entity_type, ['node', 'block_content', 'taxonomy_term', 'comment'])) {
    \Drupal::service('filelink_usage.scanner')->scanEntity($entity);
  }
  elseif ($entity instanceof FileInterface) {
    // A new file was added; update usage if this file matches any known links.
    \Drupal::service('filelink_usage.manager')->addUsageForFile($entity);
  }
}

/**
 * Responds to entity update events.
 */
function filelink_usage_entity_update(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    // Rescan updated node content for file links.
    \Drupal::service('filelink_usage.scanner')->scanEntity($entity);
  }
  elseif ($entity->getEntityType()->id() === 'block_content' || $entity->getEntityType()->id() === 'taxonomy_term' || $entity->getEntityType()->id() === 'comment') {
    // Rescan updated block, taxonomy term, or comment content for file links.
    \Drupal::service('filelink_usage.scanner')->scanEntity($entity);
  }
  // (File updates typically don't need scanning; file usage changes are handled on insert or through content rescans.)
}

/**
 * Responds to entity delete events.
 */
function filelink_usage_entity_delete(\Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    // Clean up file usage records when a node is deleted.
    \Drupal::service('filelink_usage.manager')->cleanupNode($entity);
  }
  elseif ($entity instanceof FileInterface) {
    // Clean up file usage records when a file is deleted, if necessary.
    \Drupal::service('filelink_usage.manager')->removeFileUsage($entity);
  }
  else {
    // For other content entities (blocks, taxonomy terms, comments), remove file usage references.
    $type = $entity->getEntityType()->id();
    if ($type === 'block_content') {
      $type = 'block';
    }
    \Drupal::service('filelink_usage.manager')->reconcileEntityUsage($type, $entity->id(), TRUE);
  }
}
