<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\file\FileInterface;
use Drupal\node\NodeInterface;
use Drupal\block_content\BlockContentInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\comment\CommentInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\file\FileUsage\FileUsageInterface;

/**
 * ---------------------------------------------------------------------------
 *  Hook glue – delegates all work to the FileLinkUsageManager service.
 * ---------------------------------------------------------------------------
 */

/**
 * Implements hook_cron().
 *
 * Executes the lightweight scanner once per cron run (or per the setting in
 * Admin → Configuration → Media → File Link Usage).
 */
function filelink_usage_cron(): void {
  \Drupal::service('filelink_usage.manager')->runCron();
}

/**
 * Implements hook_entity_insert().
 */
function filelink_usage_entity_insert(EntityInterface $entity): void {
  $manager = \Drupal::service('filelink_usage.manager');

  switch ($entity->getEntityTypeId()) {
    case 'file':
      // Just invalidate the new file’s cache‑tag so “Used In” shows 0 instantly.
      /** @var \Drupal\file\FileInterface $entity */
      $manager->addUsageForFile($entity);
      break;

    default:
      $entity_type = $entity->getEntityType();
      if ($entity_type instanceof ContentEntityTypeInterface) {
        // Immediately register any detected file links just like presave hooks
        // do for existing entities so file usage counts update right away.
        _filelink_usage_manage_presave($entity);
        // Also mark for a future rescan in case new files matching the links
        // are uploaded later.
        $manager->markEntityForScan($entity->getEntityTypeId(), $entity->id());
      }
  }
}

/**
 * Implements hook_entity_update().
 */
function filelink_usage_entity_update(EntityInterface $entity): void {
  // Any content edit might add/remove links – mark for re‑scan.
  $entity_type = $entity->getEntityType();
  if ($entity_type instanceof ContentEntityTypeInterface) {
    \Drupal::service('filelink_usage.manager')
      ->markEntityForScan($entity->getEntityTypeId(), $entity->id());
  }
}

/**
 * Implements hook_entity_delete().
 */
function filelink_usage_entity_delete(EntityInterface $entity): void {
  $manager = \Drupal::service('filelink_usage.manager');

  switch ($entity->getEntityTypeId()) {
    case 'node':
      /** @var \Drupal\node\NodeInterface $entity */
      $manager->cleanupNode($entity);
      break;

    case 'file':
      // Intentionally left blank: managed file deletions no longer trigger
      // any cleanup of usage records. This preserves existing references and
      // avoids altering other entities' usage.
      break;

    default:
      // Purge any usage rows for other content entity types.
      $entity_type = $entity->getEntityType();
      if ($entity_type instanceof ContentEntityTypeInterface) {
        $manager->reconcileEntityUsage($entity->getEntityTypeId(), $entity->id(), TRUE);
      }
  }
}

/**
 * Mark a node as needing a rescan.
 *
 * Retained for backward compatibility with older hooks.
 */
function filelink_usage_mark_for_rescan(NodeInterface $node): void {
  \Drupal::service('filelink_usage.manager')->markEntityForScan('node', $node->id());
}

/**
 * Extract file URIs from all text fields of an entity.
 */
function _filelink_usage_extract_uris(EntityInterface $entity): ?array {
  $uris = [];
  $normalizer = \Drupal::service('filelink_usage.normalizer');
  foreach ($entity->getFieldDefinitions() as $field_name => $definition) {
    $type = $definition->getType();
    if (!in_array($type, ['text', 'text_long', 'text_with_summary', 'string_long'], TRUE)) {
      continue;
    }
    if (!$entity->hasField($field_name)) {
      continue;
    }
    foreach ($entity->get($field_name)->getValue() as $item) {
      $text = $item['value'] ?? '';
      if ($text === '') {
        continue;
      }
      $dom = new \DOMDocument();
      libxml_use_internal_errors(TRUE);
      $loaded = $dom->loadHTML('<meta http-equiv="Content-Type" content="text/html; charset=utf-8">' . $text, LIBXML_NOWARNING | LIBXML_NOERROR);
      $errors = libxml_get_errors();
      libxml_clear_errors();
      libxml_use_internal_errors(FALSE);
      if (!$loaded || !empty($errors)) {
        \Drupal::logger('filelink_usage')->error('Failed parsing HTML in %type %id field %field.', [
          '%type' => $entity->getEntityTypeId(),
          '%id' => $entity->id(),
          '%field' => $field_name,
        ]);
        return NULL;
      }
      $xpath = new \DOMXPath($dom);
      foreach ($xpath->query('//*[@href]|//*[@src]') as $node) {
        $attr = $node->hasAttribute('href') ? 'href' : 'src';
        $url = $node->getAttribute($attr);
        if (preg_match('#/(?:sites/default/files|system/files)/#i', $url)) {
          $uris[] = $normalizer->normalize($url);
        }
      }
    }
  }
  return array_values(array_unique($uris));
}

/**
 * Manage file usage for a presave entity.
 */
function _filelink_usage_manage_presave(EntityInterface $entity): void {
  $id = (int) $entity->id();
  if (!$id) {
    return;
  }
  $uris = _filelink_usage_extract_uris($entity);
  if ($uris === NULL) {
    return;
  }
  \Drupal::service('filelink_usage.manager')
    ->manageUsage($entity->getEntityTypeId(), $id, $uris);
}

/**
 * Remove usage for a deleted entity.
 */
function _filelink_usage_cleanup_deleted(string $type, int $id, EntityTypeManagerInterface $etm, FileUsageInterface $usage): void {
  $target_type = $type === 'block_content' ? 'block' : $type;
  $database = \Drupal::database();

  if (!$database->schema()->tableExists('filelink_usage_matches')) {
    return;
  }

  // Collect affected file IDs before the manager purges usage.
  $links = $database->select('filelink_usage_matches', 'f')
    ->fields('f', ['link', 'managed_file_uri'])
    ->condition('entity_type', $target_type)
    ->condition('entity_id', $id)
    ->execute()
    ->fetchAll();

  $file_ids = [];
  $manager = \Drupal::service('filelink_usage.manager');
  foreach ($links as $row) {
    $file = NULL;
    if (!empty($row->managed_file_uri)) {
      $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => $row->managed_file_uri]);
      if ($files) {
        $file = reset($files);
      }
    }
    if (!$file) {
      $file = $manager->loadFileByNormalizedUri($row->link);
    }
    if ($file) {
      $file_ids[] = $file->id();
    }
  }

  // Delegate cleanup to the manager, which removes usage and tracking rows.
  \Drupal::service('filelink_usage.manager')
    ->reconcileEntityUsage($target_type, $id, TRUE);

  $tags = array_map(fn(int $fid) => "file:$fid", array_unique($file_ids));
  $tags[] = 'file_list';
  \Drupal::service('cache_tags.invalidator')->invalidateTags($tags);
}

/**
 * Implements hook_node_presave().
 */
function filelink_usage_node_presave(NodeInterface $node): void {
  _filelink_usage_manage_presave($node);
}

/**
 * Implements hook_block_content_presave().
 */
function filelink_usage_block_content_presave(BlockContentInterface $block): void {
  _filelink_usage_manage_presave($block);
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function filelink_usage_taxonomy_term_presave(TermInterface $term): void {
  _filelink_usage_manage_presave($term);
}

/**
 * Implements hook_comment_presave().
 */
function filelink_usage_comment_presave(CommentInterface $comment): void {
  _filelink_usage_manage_presave($comment);
}

/**
 * Implements hook_paragraph_presave().
 */
function filelink_usage_paragraph_presave(ParagraphInterface $paragraph): void {
  _filelink_usage_manage_presave($paragraph);
}

/**
 * Implements hook_node_delete().
 */
function filelink_usage_node_delete(NodeInterface $node): void {
  _filelink_usage_cleanup_deleted('node', $node->id(), \Drupal::service('entity_type.manager'), \Drupal::service('file.usage'));
}

/**
 * Implements hook_block_content_delete().
 */
function filelink_usage_block_content_delete(BlockContentInterface $block): void {
  _filelink_usage_cleanup_deleted('block_content', $block->id(), \Drupal::service('entity_type.manager'), \Drupal::service('file.usage'));
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function filelink_usage_taxonomy_term_delete(TermInterface $term): void {
  _filelink_usage_cleanup_deleted('taxonomy_term', $term->id(), \Drupal::service('entity_type.manager'), \Drupal::service('file.usage'));
}

/**
 * Implements hook_comment_delete().
 */
function filelink_usage_comment_delete(CommentInterface $comment): void {
  _filelink_usage_cleanup_deleted('comment', $comment->id(), \Drupal::service('entity_type.manager'), \Drupal::service('file.usage'));
}

/**
 * Implements hook_paragraph_delete().
 */
function filelink_usage_paragraph_delete(ParagraphInterface $paragraph): void {
  _filelink_usage_cleanup_deleted('paragraph', $paragraph->id(), \Drupal::service('entity_type.manager'), \Drupal::service('file.usage'));
}
