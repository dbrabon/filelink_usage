<?php
declare(strict_types=1);

/**
 * Implements hook_schema().
 */
function filelink_usage_schema() {
  $schema['filelink_usage_matches'] = [
    'description' => 'Stores detected file links in content entity text fields.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'entity_type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'link' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_type' => ['entity_type'],
      'entity_id' => ['entity_id'],
      'link' => ['link'],
    ],
    'unique keys' => [
      'entity_link' => ['entity_type', 'entity_id', 'link'],
    ],
  ];

  $schema['filelink_usage_scan_status'] = [
    'description' => 'Tracks the last successful scan time for each content entity.',
    'fields' => [
      'entity_type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'scanned' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['entity_type', 'entity_id'],
  ];
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function filelink_usage_uninstall() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('filelink_usage_matches')) {
    $schema->dropTable('filelink_usage_matches');
  }
  if ($schema->tableExists('filelink_usage_scan_status')) {
    $schema->dropTable('filelink_usage_scan_status');
  }

  // Remove module configuration if present.
  \Drupal::configFactory()->getEditable('filelink_usage.settings')->delete();
}

/**
 * Add a unique key on nid and link.
 */
function filelink_usage_update_8001() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('filelink_usage_matches') && !$schema->indexExists('filelink_usage_matches', 'nid_link')) {
    // Remove duplicate rows to avoid constraint violations when adding the
    // unique key. We keep the earliest inserted record for each nid/link pair.
    $connection = \Drupal::database();
    $query = $connection->select('filelink_usage_matches', 'f')
      ->fields('f', ['id', 'nid', 'link'])
      ->orderBy('id', 'ASC');
    $seen = [];
    foreach ($query->execute() as $row) {
      $key = $row->nid . '|' . $row->link;
      if (isset($seen[$key])) {
        $connection->delete('filelink_usage_matches')
          ->condition('id', $row->id)
          ->execute();
      }
      else {
        $seen[$key] = TRUE;
      }
    }

    $schema->addUniqueKey('filelink_usage_matches', 'nid_link', ['nid', 'link']);
  }
}

/**
 * Create scan status table.
 */
function filelink_usage_update_8002() {
  $schema = \Drupal::database()->schema();
  if (!$schema->tableExists('filelink_usage_scan_status')) {
    $schema->createTable('filelink_usage_scan_status', [
      'description' => 'Tracks the last successful scan time for each node.',
      'fields' => [
        'nid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'scanned' => [
          'type' => 'int',
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['nid'],
    ]);
  }
}

/**
 * Add scan frequency and last scan settings.
 */
function filelink_usage_update_8003() {
  $config = \Drupal::configFactory()->getEditable('filelink_usage.settings');
  if ($config->get('scan_frequency') === NULL) {
    $config->set('scan_frequency', 'daily');
  }
  if ($config->get('last_scan') === NULL) {
    $config->set('last_scan', 0);
  }
  $config->save();
}

/**
 * Normalize existing link records.
 */
function filelink_usage_update_8004() {
  $connection = \Drupal::database();
  /** @var \Drupal\filelink_usage\FileLinkUsageNormalizer $normalizer */
  $normalizer = \Drupal::service('filelink_usage.normalizer');

  $query = $connection->select('filelink_usage_matches', 'f')
    ->fields('f', ['id', 'nid', 'link'])
    ->orderBy('id', 'ASC');
  $seen = [];
  foreach ($query->execute() as $row) {
    $normalized = $normalizer->normalize($row->link);
    $key = $row->nid . '|' . $normalized;
    if (isset($seen[$key])) {
      $connection->delete('filelink_usage_matches')
        ->condition('id', $row->id)
        ->execute();
      continue;
    }
    $seen[$key] = TRUE;
    if ($normalized !== $row->link) {
      $connection->update('filelink_usage_matches')
        ->fields(['link' => $normalized])
        ->condition('id', $row->id)
        ->execute();
    }
  }
}

/**
 * Update default settings for verbose logging and scan frequency.
 */
function filelink_usage_update_8005() {
  $config = \Drupal::configFactory()->getEditable('filelink_usage.settings');
  if ($config->get('verbose_logging') === TRUE) {
    $config->set('verbose_logging', FALSE);
  }
  if ($config->get('scan_frequency') === 'daily') {
    $config->set('scan_frequency', 'yearly');
  }
  if ($config->get('scan_frequency') === NULL) {
    $config->set('scan_frequency', 'yearly');
  }
  $config->save();
}

/**
 * Add entity type support to match and scan tables.
 */
function filelink_usage_update_8006() {
  $schema = \Drupal::database()->schema();
  $connection = \Drupal::database();

  // Update filelink_usage_matches table.
  if ($schema->tableExists('filelink_usage_matches')) {
    if (!$schema->fieldExists('filelink_usage_matches', 'entity_type')) {
      $schema->addField('filelink_usage_matches', 'entity_type', [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'node',
      ]);
      $connection->update('filelink_usage_matches')
        ->fields(['entity_type' => 'node'])
        ->execute();
    }
    if ($schema->fieldExists('filelink_usage_matches', 'nid')) {
      $schema->changeField('filelink_usage_matches', 'nid', 'entity_id', [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ]);
    }
    elseif (!$schema->fieldExists('filelink_usage_matches', 'entity_id')) {
      $schema->addField('filelink_usage_matches', 'entity_id', [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ]);
    }
    if ($schema->indexExists('filelink_usage_matches', 'nid')) {
      $schema->dropIndex('filelink_usage_matches', 'nid');
    }
    if ($schema->uniqueKeyExists('filelink_usage_matches', 'nid_link')) {
      $schema->dropUniqueKey('filelink_usage_matches', 'nid_link');
    }
    if (!$schema->indexExists('filelink_usage_matches', 'entity_type')) {
      $schema->addIndex('filelink_usage_matches', 'entity_type', ['entity_type']);
    }
    if (!$schema->indexExists('filelink_usage_matches', 'entity_id')) {
      $schema->addIndex('filelink_usage_matches', 'entity_id', ['entity_id']);
    }
    if (!$schema->uniqueKeyExists('filelink_usage_matches', 'entity_link')) {
      $schema->addUniqueKey('filelink_usage_matches', 'entity_link', ['entity_type', 'entity_id', 'link']);
    }
  }

  // Update filelink_usage_scan_status table.
  if ($schema->tableExists('filelink_usage_scan_status')) {
    if (!$schema->fieldExists('filelink_usage_scan_status', 'entity_type')) {
      $schema->addField('filelink_usage_scan_status', 'entity_type', [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'node',
      ]);
      $connection->update('filelink_usage_scan_status')
        ->fields(['entity_type' => 'node'])
        ->execute();
    }
    if ($schema->fieldExists('filelink_usage_scan_status', 'nid')) {
      $schema->changeField('filelink_usage_scan_status', 'nid', 'entity_id', [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ]);
    }
    elseif (!$schema->fieldExists('filelink_usage_scan_status', 'entity_id')) {
      $schema->addField('filelink_usage_scan_status', 'entity_id', [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ]);
    }
    $schema->dropPrimaryKey('filelink_usage_scan_status');
    $schema->addPrimaryKey('filelink_usage_scan_status', ['entity_type', 'entity_id']);
  }
}
