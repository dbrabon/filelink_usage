<?php
declare(strict_types=1);

/**
 * Implements hook_schema().
 */
function filelink_usage_schema() {
  $schema['filelink_usage_matches'] = [
    'description' => 'Stores detected file links in content entity text fields.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'entity_type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'link' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
      ],
      'managed_file_uri' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => FALSE,
      ],
      'timestamp' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_type' => ['entity_type'],
      'entity_id' => ['entity_id'],
      'link' => ['link'],
      // Limit index length for compatibility with InnoDB on MySQL.
      'managed_file_uri' => ['managed_file_uri(191)'],
    ],
    'unique keys' => [
      'entity_link' => ['entity_type', 'entity_id', 'link'],
    ],
  ];

  $schema['filelink_usage_scan_status'] = [
    'description' => 'Tracks the last successful scan time for each content entity.',
    'fields' => [
      'entity_type' => [
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ],
      'entity_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'scanned' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['entity_type', 'entity_id'],
  ];
  return $schema;
}

/**
 * Implements hook_install().
 */
function filelink_usage_install(): void {
  $schema = \Drupal::database()->schema();

  $tables = [
    'node_field_data',
    'block_content_field_data',
    'taxonomy_term_field_data',
    'comment_field_data',
  ];

  foreach ($tables as $table) {
    if (!$schema->tableExists($table)) {
      return;
    }
  }

  \Drupal::service('filelink_usage.manager')->runCron();
}

/**
 * Implements hook_uninstall().
 */
function filelink_usage_uninstall() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('filelink_usage_matches')) {
    $schema->dropTable('filelink_usage_matches');
  }
  if ($schema->tableExists('filelink_usage_scan_status')) {
    $schema->dropTable('filelink_usage_scan_status');
  }

  // Remove module configuration if present.
  \Drupal::configFactory()->getEditable('filelink_usage.settings')->delete();
}

/**
 * Add a unique key on nid and link.
 */
function filelink_usage_update_8001() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('filelink_usage_matches') && !$schema->indexExists('filelink_usage_matches', 'nid_link')) {
    // Remove duplicate rows to avoid constraint violations when adding the
    // unique key. We keep the earliest inserted record for each nid/link pair.
    $connection = \Drupal::database();
    $query = $connection->select('filelink_usage_matches', 'f')
      ->fields('f', ['id', 'nid', 'link'])
      ->orderBy('id', 'ASC');
    $seen = [];
    foreach ($query->execute() as $row) {
      $key = $row->nid . '|' . $row->link;
      if (isset($seen[$key])) {
        $connection->delete('filelink_usage_matches')
          ->condition('id', $row->id)
          ->execute();
      }
      else {
        $seen[$key] = TRUE;
      }
    }

    $schema->addUniqueKey('filelink_usage_matches', 'nid_link', ['nid', 'link']);
  }
}

/**
 * Create scan status table.
 */
function filelink_usage_update_8002() {
  $schema = \Drupal::database()->schema();
  if (!$schema->tableExists('filelink_usage_scan_status')) {
    $schema->createTable('filelink_usage_scan_status', [
      'description' => 'Tracks the last successful scan time for each node.',
      'fields' => [
        'nid' => [
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ],
        'scanned' => [
          'type' => 'int',
          'not null' => TRUE,
        ],
      ],
      'primary key' => ['nid'],
    ]);
  }
}

/**
 * Add scan frequency and last scan settings.
 */
function filelink_usage_update_8003() {
  $config = \Drupal::configFactory()->getEditable('filelink_usage.settings');
  if ($config->get('scan_frequency') === NULL) {
    $config->set('scan_frequency', 'daily');
  }
  if ($config->get('last_scan') === NULL) {
    $config->set('last_scan', 0);
  }
  $config->save();
}

/**
 * Normalize existing link records.
 */
function filelink_usage_update_8004() {
  $connection = \Drupal::database();
  /** @var \Drupal\filelink_usage\FileLinkUsageNormalizer $normalizer */
  $normalizer = \Drupal::service('filelink_usage.normalizer');

  $query = $connection->select('filelink_usage_matches', 'f')
    ->fields('f', ['id', 'nid', 'link'])
    ->orderBy('id', 'ASC');
  $seen = [];
  foreach ($query->execute() as $row) {
    $normalized = $normalizer->normalize($row->link);
    $key = $row->nid . '|' . $normalized;
    if (isset($seen[$key])) {
      $connection->delete('filelink_usage_matches')
        ->condition('id', $row->id)
        ->execute();
      continue;
    }
    $seen[$key] = TRUE;
    if ($normalized !== $row->link) {
      $connection->update('filelink_usage_matches')
        ->fields(['link' => $normalized])
        ->condition('id', $row->id)
        ->execute();
    }
  }
}

/**
 * Update default settings for verbose logging and scan frequency.
 */
function filelink_usage_update_8005() {
  $config = \Drupal::configFactory()->getEditable('filelink_usage.settings');
  if ($config->get('verbose_logging') === TRUE) {
    $config->set('verbose_logging', FALSE);
  }
  if ($config->get('scan_frequency') === 'daily') {
    $config->set('scan_frequency', 'yearly');
  }
  if ($config->get('scan_frequency') === NULL) {
    $config->set('scan_frequency', 'yearly');
  }
  $config->save();
}

/**
 * Add scan batch size setting.
 */
function filelink_usage_update_8006() {
  $config = \Drupal::configFactory()->getEditable('filelink_usage.settings');
  if ($config->get('scan_batch_size') === NULL) {
    $config->set('scan_batch_size', 50);
    $config->save();
  }
}

/**
 * Add managed_file_uri column to matches table and populate it.
 */
function filelink_usage_update_8007() {
  $database = \Drupal::database();
  $schema = $database->schema();

  if ($schema->tableExists('filelink_usage_matches') && !$schema->fieldExists('filelink_usage_matches', 'managed_file_uri')) {
    $schema->addField('filelink_usage_matches', 'managed_file_uri', [
      'type' => 'varchar',
      'length' => 1024,
      'not null' => FALSE,
    ]);
    // Specify index length explicitly for MySQL compatibility.
    $schema->addIndex('filelink_usage_matches', 'managed_file_uri', ['managed_file_uri(191)']);

    /** @var \Drupal\filelink_usage\FileLinkUsageManager $manager */
    $manager = \Drupal::service('filelink_usage.manager');
    $query = $database->select('filelink_usage_matches', 'f')
      ->fields('f', ['id', 'link']);
    foreach ($query->execute() as $row) {
      $file = $manager->loadFileByNormalizedUri($row->link);
      if ($file) {
        $database->update('filelink_usage_matches')
          ->fields(['managed_file_uri' => $file->getFileUri()])
          ->condition('id', $row->id)
          ->execute();
      }
    }
  }
}
